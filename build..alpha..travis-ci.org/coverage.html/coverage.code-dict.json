{"/home/travis/build/npmtest/node-npmtest-mongoskin/test.js":"/* istanbul instrument in package npmtest_mongoskin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongoskin/lib.npmtest_mongoskin.js":"/* istanbul instrument in package npmtest_mongoskin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mongoskin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mongoskin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mongoskin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mongoskin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mongoskin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mongoskin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mongoskin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_mongoskin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mongoskin.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_mongoskin.__dirname +\n                    '/lib.npmtest_mongoskin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongoskin/mongoskin/index.js":"module.exports = require('./lib/');\n","/home/travis/build/npmtest/node-npmtest-mongoskin/mongoskin/lib/index.js":"/*!\n * mongoskin - index.js\n *\n * Copyright(c) 2011 - 2012 kissjs.org\n * MIT Licensed\n */\n\n\"use strict\";\n\n/**\n * Module dependencies.\n */\n\nvar mongo = require('mongodb');\n\n/*\n * exports mongo classes ObjectID Long Code DbRef ... to mongoskin\n */\nfor (var key in mongo) {\n  exports[key] = mongo[key];\n}\n\n// exports.Foo = SkinFoo;\n;['mongo_client', 'db', 'collection', 'cursor', 'admin', 'grid_store'].forEach(function(modPath){\n    var mod = require('./' + modPath);\n    for(var name in mod) {\n      if(name.indexOf('Skin') == 0) {\n        exports[name.substring(4)] = mod[name];\n      }\n    }\n});\n\nexports.helper = require('./helper');\nexports.utils = require('./utils');\n\nexports.db = exports.MongoClient.connect;\n","/home/travis/build/npmtest/node-npmtest-mongoskin/mongoskin/lib/mongo_client.js":"var mongodb = require('mongodb');\nvar MongoClient = mongodb.MongoClient;\nvar utils = require('./utils');\n\nvar SkinDb = require('./db').SkinDb;\n\nvar SkinMongoClient = utils.makeSkinClass(MongoClient, true);\nexports.SkinMongoClient = SkinMongoClient;\n\nSkinMongoClient.connect = function() {\n  var args = [].slice.call(arguments);\n  var db = new SkinDb();\n  db._connect_args = args;\n  return db;\n}\n","/home/travis/build/npmtest/node-npmtest-mongoskin/mongoskin/lib/utils.js":"/*!\n * mongoskin - utils.js\n *\n * Copyright(c) 2011 - 2012 kissjs.org\n * Copyright(c) 2012 fengmk2 <fengmk2@gmail.com>\n * MIT Licensed\n */\n\n\"use strict\";\n\n/**\n * Module dependencies.\n */\n\nvar __slice = Array.prototype.slice;\nvar EventEmitter = require('events').EventEmitter;\nvar constant = require('./constant');\nvar STATE_CLOSE = constant.STATE_CLOSE;\nvar STATE_OPENNING = constant.STATE_OPENNING;\nvar STATE_OPEN = constant.STATE_OPEN;\n\nexports.makeSkinClass = function makeSkinClass(NativeClass, useNativeConstructor) {\n\n  function onError (err, args, name) {\n    var cb = args.pop();\n    if (cb && typeof cb === 'function') {\n      cb(err);\n    } else {\n      console.error(\"Error occured with no callback to handle it while calling \" + name,  err);\n    }\n  };\n\n  var skinClassName = 'Skin' + NativeClass.name;\n  function SkinClass() {\n    var args = __slice.call(arguments);\n    this._construct_args = args;\n    if(useNativeConstructor && arguments.length > 0) {\n      args.unshift(null);\n      var ctor = NativeClass.bind.apply(NativeClass, args);\n      this._native = new ctor();\n    } else {\n      this._native = null;\n    }\n    this._emitter = new EventEmitter();\n    this._emitter.setMaxListeners(50);\n    this._state = STATE_CLOSE;\n    this._init && this._init();\n  }\n  SkinClass._class_name = skinClassName;\n\n  function bindSkin(propName) {\n    var fn;\n    var desc = Object.getOwnPropertyDescriptor(NativeClass.prototype, propName);\n    if(!desc) {\n      // console.log('no desc', skinClassName, propName, desc);\n      try{\n        fn = NativeClass.prototype[propName];\n      } catch(e) {}\n    } else {\n      fn = desc.value;\n    }\n    if(typeof fn == 'function') {\n      SkinClass._bindMethod(propName);\n    } else if(desc) {\n      if (desc.get) {\n        SkinClass._bindGetter(propName);\n      }\n      if (desc.set) {\n        SkinClass._bindSetter(propName);\n      }\n    // } else {\n    //   this will never be called, so comment it.\n    //   console.log('no desc and no value', skinClassName, propName);\n    }\n  }\n\n  SkinClass._bindMethod = function(propName) {\n    SkinClass.prototype[propName] = function() {\n      var args = __slice.apply(arguments);\n      if (this._state == STATE_OPEN) {\n        this._native[propName].apply(this._native, args);\n      } else {\n        this.open(function(err, p_native) {\n            if (err) {\n              onError(err, args, skinClassName + '.' + propName);\n            } else {\n              p_native[propName].apply(p_native, args);\n            }\n        });\n      }\n      return this;\n    }\n  }\n\n  SkinClass._bindGetter = function(propName) {\n      SkinClass.prototype.__defineGetter__(propName, function() {\n          return this._native && this._native[propName];// || this['_prop_' + propName];\n      });\n  }\n\n  SkinClass._bindSetter = function(propName) {\n      SkinClass.prototype.__defineSetter__(propName, function(value) {\n          // this['_prop_' + propName] = value;\n          this.open(function(err, p_native) {\n              if(err) return onError(err, args, skinClassName + '.' + propName);\n              p_native[propName] = value;\n          });\n      });\n  }\n\n  for(var propName in NativeClass.prototype) {\n    if(propName[0] != '_') bindSkin(propName);\n  }\n\n  SkinClass.prototype.open = function(callback) {\n    switch (this._state) {\n      case STATE_OPEN:\n        callback(null, this._native);\n        break;\n      case STATE_OPENNING:\n        this._emitter.once('open', callback);\n        break;\n      default:\n        this._emitter.once('open', callback);\n        this._state = STATE_OPENNING;\n        var self = this;\n        this._open(function(err, p_native) {\n            if (err) {\n              self._state = STATE_CLOSE;\n            } else {\n              self._state = STATE_OPEN;\n              self._native = p_native;\n            }\n            self._emitter.emit('open', err, p_native);\n        });\n    }\n    return this;\n  }\n\n  SkinClass.prototype.close = function (callback) {\n    if (this._state === STATE_CLOSE) {\n      callback && callback();\n    } else if (this._state === STATE_OPEN) {\n      this._state = STATE_CLOSE;\n      this._close(callback);\n    } else if (this._state === STATE_OPENNING) {\n      var self = this;\n      this._emitter.once('open', function (err, db) {\n          self.close(callback);\n      });\n    }\n    this._native = null;\n    return this;\n  }\n\n  SkinClass.prototype._close = function(callback) {\n    if(this._native.close) {\n      this._native.close(callback)\n    } else if(callback) {\n      callback();\n    }\n  }\n\n  SkinClass.prototype.isOpen = function() {\n    return this._state === STATE_OPEN;\n  }\n\n  return SkinClass;\n\n}\n","/home/travis/build/npmtest/node-npmtest-mongoskin/mongoskin/lib/constant.js":"/*!\n * mongoskin - constant.js\n *\n * Copyright(c) 2011 - 2012 kissjs.org\n * Copyright(c) 2012 fengmk2 <fengmk2@gmail.com>\n * MIT Licensed\n */\n\n\"use strict\";\n\nexports.DEFAULT_PORT = 27017;\n\nexports.STATE_CLOSE = 0;\nexports.STATE_OPENNING = 1;\nexports.STATE_OPEN = 2;","/home/travis/build/npmtest/node-npmtest-mongoskin/mongoskin/lib/db.js":"/*!\n * mongoskin - db.js\n *\n * Copyright(c) 2011 - 2012 kissjs.org\n * Copyright(c) 2012 fengmk2 <fengmk2@gmail.com>\n * MIT Licensed\n */\n\n\"use strict\";\n\n/**\n * Module dependencies.\n * TODO db.gridfs()\n */\n\nvar mongodb = require('mongodb');\nvar Db = mongodb.Db;\nvar MongoClient = mongodb.MongoClient;\nvar utils = require('./utils');\nvar SkinAdmin = require('./admin').SkinAdmin;\nvar SkinCollection = require('./collection').SkinCollection;\nvar SkinGridStore = require('./grid_store').SkinGridStore;\n\n/**\n * Constructor\n */\nvar SkinDb = exports.SkinDb = utils.makeSkinClass(Db, true);\n\nSkinDb.prototype._open = function(callback) {\n  // TODO authenticate support\n  if(this._native) {\n    this._native.open(callback);\n  } else if(this._connect_args) {\n    var args = this._connect_args.concat(callback);\n    MongoClient.connect.apply(MongoClient, args);\n  }\n}\n\n/**\n * Create or retrieval skin collection\n *\n * @param {String} name, the collection name.\n * @param {Object} [options] collection options.\n * @return {SkinCollection}\n * @api public\n */\nSkinDb.prototype.collection = function (name, options) {\n  // Ooops, no extended mthods like findById etc.\n  // if(this.isOpen() && (!options || !options.strict) && !callback) {\n  //   // mongodb now support collection without callback\n  //   // see: http://mongodb.github.io/node-mongodb-native/api-generated/db.html#collection\n  //   return this._native.collection(name, options);\n  // }\n  var collection = new SkinCollection();\n  collection._skin_db = this;\n  collection._collection_args = [name, options];\n  return collection;\n};\n\n/**\n * @param {String} name the collection name\n * @param {Object} [options] collection options\n * @return {SkinCollection} collection\n */\nSkinDb.prototype.bind = function (name, options) {\n  return this[name] = this.collection(name, options);\n}\n\nSkinDb.prototype._admin = SkinDb.prototype.admin;\nSkinDb.prototype.admin = function () {\n  return new SkinAdmin(this);\n}\n\nSkinDb.prototype.gridStore = function () {\n  var skinGridStore = new SkinGridStore();\n  var args = Array.prototype.slice.call(arguments);\n  args.unshift(this);\n  skinGridStore._construct_args = args;\n  return skinGridStore;\n}\n","/home/travis/build/npmtest/node-npmtest-mongoskin/mongoskin/lib/admin.js":"/*!\n * mongoskin - admin.js\n *\n * Copyright(c) 2011 - 2012 kissjs.org\n * Copyright(c) 2012 fengmk2 <fengmk2@gmail.com>\n * MIT Licensed\n */\n\n\"use strict\";\n\nvar Admin = require('mongodb/lib/admin');\nvar makeSkinClass = require('./utils').makeSkinClass;\n\nvar SkinAdmin = exports.SkinAdmin = makeSkinClass(Admin, false, true);\n\nSkinAdmin.prototype._open = function(callback) {\n  var skindb = this._construct_args[0];\n  skindb.open(function(err, p_db) {\n      if(err) return callback(err);\n      callback(null, p_db.admin());\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-mongoskin/mongoskin/lib/collection.js":"/*!\n * mongoskin - collection.js\n *\n * Copyright(c) 2011 - 2012 kissjs.org\n * Copyright(c) 2012 fengmk2 <fengmk2@gmail.com>\n * MIT Licensed\n */\n\n\"use strict\";\n\n/**\n * Module dependencies.\n */\nvar __slice = Array.prototype.slice;\nvar Collection = require('mongodb').Collection;\nvar SkinCursor = require('./cursor').SkinCursor;\nvar helper = require('./helper');\nvar utils = require('./utils');\n\n/**\n * Constructor\n */\nvar SkinCollection = exports.SkinCollection = utils.makeSkinClass(Collection);\n\n/**\n * bind extend functions to collection\n *\n * e.g.\n *\n * db.bind('article').bind({\n *   getPostByAuthor: function(id, callback) {\n *      this.findOne({author_id: id}, callback);\n *   }\n * });\n *\n */\nSkinCollection.prototype.bind = function(extendObject) {\n  for(var key in extendObject) {\n    if(typeof extendObject[key] == 'function') {\n      this[key] = extendObject[key].bind(this);\n    } else {\n      this[key] = extendObject[key];\n    }\n  }\n}\n\nSkinCollection.prototype._open = function(callback) {\n  var collection_args = this._collection_args.concat([callback]);\n  this._skin_db.open(function(err, db) {\n      if(err) return callback(err);\n      db.collection.apply(db, collection_args);\n  });\n}\n\n/*\n * find is a special method, because it could return a SkinCursor instance\n */\nSkinCollection.prototype._find = SkinCollection.prototype.find;\n\n/**\n * same args as find, but use Array as callback result but not use Cursor\n *\n * findItems(args, function (err, items) {});\n *\n * same as\n *\n * find(args).toArray(function (err, items) {});\n *\n * or using `mongodb.collection.find()`\n *\n * find(args, function (err, cursor) {\n *   cursor.toArray(function (err, items) {\n *   });\n * });\n *\n * @param {Object} [query]\n * @param {Object} [options]\n * @param {Function(err, docs)} callback\n * @return {SkinCollection} this\n * @api public\n */\nSkinCollection.prototype.findItems = function (query, options, callback) {\n  var args = __slice.call(arguments);\n  var fn = args[args.length - 1];\n  args[args.length - 1] = function (err, cursor) {\n    if (err) {\n      return fn(err);\n    }\n    cursor.toArray(fn);\n  };\n  this.find.apply(this, args);\n  return this;\n};\n\n/**\n * find and cursor.each(fn).\n *\n * @param {Object} [query]\n * @param {Object} [options]\n * @param {Function(err, item)} eachCallback\n * @return {SkinCollection} this\n * @api public\n */\nSkinCollection.prototype.findEach = function (query, options, eachCallback) {\n  var args = __slice.call(arguments);\n  var fn = args[args.length - 1];\n  args[args.length - 1] = function (err, cursor) {\n    if (err) {\n      return fn(err);\n    }\n    cursor.each(fn);\n  };\n  this.find.apply(this, args);\n  return this;\n};\n\n/**\n * Operate by object.`_id`\n *\n * @param {String} methodName\n * @param {String|ObjectID|Number} id\n * @param {Arguments|Array} args\n * @return {SkinCollection} this\n * @api private\n */\nSkinCollection.prototype._operateById = function (methodName, id, args) {\n  args = __slice.call(args);\n  args[0] = {_id: helper.toObjectID(id)};\n  this[methodName].apply(this, args);\n  return this;\n};\n\n/**\n * Find one object by _id.\n *\n * @param {String|ObjectID|Number} id, doc primary key `_id`\n * @param {Function(err, doc)} callback\n * @return {SkinCollection} this\n * @api public\n */\nSkinCollection.prototype.findById = function (id, callback) {\n  return this._operateById('findOne', id, arguments);\n};\n\n/**\n * Update doc by _id.\n * @param {String|ObjectID|Number} id, doc primary key `_id`\n * @param {Object} doc\n * @param {Function(err)} callback\n * @return {SkinCollection} this\n * @api public\n */\nSkinCollection.prototype.updateById = function (id, doc, callback) {\n  var oldCb = callback;\n  var _this = this;\n  if (callback) {\n    callback = function(error, res) {\n      oldCb.call(_this, error, !!res ? res.result : null);\n    };\n  }\n  return this._operateById('update', id, [id, doc, callback]);\n};\n\n/**\n * Remove doc by _id.\n * @param {String|ObjectID|Number} id, doc primary key `_id`\n * @param {Function(err)} callback\n * @return {SkinCollection} this\n * @api public\n */\nSkinCollection.prototype.removeById = function (id, callback) {\n  var oldCb = callback;\n  var _this = this;\n  if (callback) {\n    callback = function(error, res) {\n      oldCb.call(_this, error, !!res ? res.result.n : null);\n    };\n  }\n  return this._operateById('remove', id, [id, callback]);\n};\n\n/**\n * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n *\n * @param {Object} query\n * @param {Object} options\n * @param {Function(err, docs)} callback\n * @return {SkinCursor|SkinCollection} if last argument is not a function, then returns a SkinCursor,\n *   otherise return this\n * @api public\n */\nSkinCollection.prototype.find = function (query, options, callback) {\n  var args = __slice.call(arguments);\n  if(this.isOpen()) {\n    return this._native.find.apply(this._native, args);\n  }\n  if (args.length > 0 && typeof args[args.length - 1] === 'function') {\n    this._find.apply(this, args);\n    return this;\n  } else {\n    var cursor = new SkinCursor();\n    cursor._skin_collection = this;\n    cursor._find_args = args;\n    return cursor;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-mongoskin/mongoskin/lib/cursor.js":"/*!\n * mongoskin - cursor.js\n *\n * Copyright(c) 2011 - 2012 kissjs.org\n * MIT Licensed\n */\n\n\"use strict\";\n\n/**\n * Module dependencies.\n */\n\nvar Cursor = require('mongodb').Cursor;\nvar utils = require('./utils');\n\nvar SkinCursor = exports.SkinCursor = utils.makeSkinClass(Cursor);\n\n/**\n * Retrieve mongodb.Cursor instance.\n * \n * @param {Function(err, cursor)} callback\n * @return {SkinCursor} this\n * @api public\n */\nSkinCursor.prototype._open = function (callback) {\n  var self = this;\n  this._skin_collection.open(function (err, collection) {\n      if (err) return callback(err);\n      var args = self._find_args.concat([callback]);\n      collection.find.apply(collection, args);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-mongoskin/mongoskin/lib/helper.js":"var mongodb = require('mongodb');\nvar ObjectID = mongodb.ObjectID;\n\n/**\n * Convert to ObjectID.\n * \n * @param {String} hex\n * @return {ObjectID}\n */\nexports.toObjectID = function (hex) {\n  if (hex instanceof ObjectID) {\n    return hex;\n  }\n  if (!hex || hex.length !== 24) {\n    return hex;\n  }\n  return ObjectID.createFromHexString(hex);\n};\n\nexports.isObjectID = function (idstr) {\n  return ObjectID.isValid(idstr);\n};\n","/home/travis/build/npmtest/node-npmtest-mongoskin/mongoskin/lib/grid_store.js":"\"use strict\";\n\nvar GridStore = require('mongodb').GridStore;\nvar makeSkinClass = require('./utils').makeSkinClass;\n\nvar SkinGridStore = exports.SkinGridStore = makeSkinClass(GridStore);\n\nSkinGridStore.prototype._open = function(callback) {\n  var skin_db = this._construct_args[0];\n  var args = this._construct_args.slice(1);\n  skin_db.open(function(err, p_db) {\n      if(err) return callback(err);\n      args = ([null, p_db]).concat(args);\n      var ctor = GridStore.bind.apply(GridStore, args);\n      var gridStore = new ctor();\n      gridStore.open(callback);\n  });\n}\n\nfunction bindStaticMethod(methodName) {\n  SkinGridStore[methodName] = function(skindb) {\n    var args = Array.prototype.slice.call(arguments);\n    skindb.open(function(err, p_db) {\n        args[0] = p_db;\n        GridStore[methodName].apply(GridStore, args);\n    });\n  }\n}\n\nbindStaticMethod('exist');\nbindStaticMethod('list');\nbindStaticMethod('read');\nbindStaticMethod('readlines');\nbindStaticMethod('unlink');\n"}